import java.util.*;
class Solution {
    int[] num;
    TreeSet<Integer> set;
    boolean[] visited;
    int answer = 0;
    String numbers="";
    public int solution(String numbers) {
        num = new int[numbers.length()];
        set = new TreeSet();
        visited = new boolean[num.length];
        this.numbers = numbers;
        
        for(int i = 0 ; i < num.length; i++){
            num[i]=numbers.charAt(i) - '0';
        }
        Arrays.sort(num);
        
        for(int i = 0 ; i<numbers.length();i++){
            int[] list = new int[i+1];
            combination(0,i+1,-1,list);
        }
        boolean[] prime = new boolean[set.last()+1];
        prime[0] = prime[1] = true;
        
        for(int i = 2; i<=Math.sqrt(set.last());i++){
            if(prime[i])
                continue;
            for(int j = i + i; j<=set.last();j+=i){
                prime[j]=true;
            }
        }
        for(Integer i : set){
            if(!prime[i])
                answer++;
        }
        return answer;
    }
    void combination(int depth, int length, int com, int[] list){
        if(depth == length){
            String tmp = "";
            for(int i = 0 ; i<list.length;i++){
                tmp +=list[i];
            }
            set.add(Integer.parseInt(tmp));
            return;
        }
        for(int i = 0; i<numbers.length();i++){
            if(!visited[i]){
                visited[i]=true;
                list[depth]=num[i];
                combination(depth + 1, length, i, list);
                visited[i]=false;
            }
        }
    }
}
